knitr::opts_chunk$set(echo = TRUE)
options(width=160)
library(h2o)
library(h2oEnsemble)
localH2O = h2o.init(nthreads=-2, max_mem_size="2G")
bc <- h2o.importFile(path=normalizePath("./talk-h2oSL-THW-2016/R-materials/BreastCancer.csv"))
bc <- h2o.importFile(path=normalizePath("/talk-h2oSL-THW-2016/R-materials/BreastCancer.csv"))
bc <- h2o.importFile(path=normalizePath("../talk-h2oSL-THW-2016/R-materials/BreastCancer.csv"))
bc <- h2o.importFile(path=normalizePath("Users/evanmuzzall/Desktop/talk-h2oSL-THW-2016/R-materials/BreastCancer.csv"))
library(h2o)
library(devtools)
library(h2o)
library(devtools)
library(h2oEnsemble)
localH2O = h2o.init(nthreads=-2, max_mem_size="2G")
bc <- h2o.importFile(path=normalizePath("Users/evanmuzzall/Desktop/talk-h2oSL-THW-2016/R-materials/BreastCancer.csv"))
getwd()
bc <- h2o.importFile(path=normalizePath("./talk-h2oSL-THW-2016/R-materials/BreastCancer.csv"))
bc <- h2o.importFile(path=normalizePath("./BreastCancer.csv"))
dim(bc)
bc
splits <- h2o.splitFrame(bc, c(0.70, 0.15), seed=1)
train <- h2o.assign(splits[[1]], "train")
valid <- h2o.assign(splits[[2]], "valid")
test <- h2o.assign(splits[[3]], "test")
train
valid
test
y <- "Class"
x <- setdiff(names(train), y)
family <- "binomial"
nfolds <- 5
train[,y] <- as.factor(train[,y])
valid[,y] <- as.factor(valid[,y])
test[,y] <- as.factor(test[,y])
rf_1 <- h2o.randomForest(
training_frame = train,
validation_frame = valid,
x=2:10,
y=11,
model_id = "rf_1",
ntrees = 200,
stopping_rounds = 2,
score_each_iteration = TRUE,
seed = 1,
nfolds=nfolds,
fold_assignment = "Modulo")
h2o.auc(rf_1) # view AUC
hidden_opt <- list(c(200,200), c(100, 300, 100), c(500,500))
l1_opt <- c(1e-5, 1e-7)
hyper_params <- list(hidden = hidden_opt, l1 = l1_opt)
cartesian_grid <- h2o.grid(algorithm = "deeplearning",
hyper_params = hyper_params,
x=x, y=y,
training_frame = train,
validation_frame = valid)
search_criteria <- list(strategy="RandomDiscrete",
max_runtime_secs=30)
random_grid <- h2o.grid(algorithm = "deeplearning",
hyper_params = hyper_params,
search_criteria = search_criteria,
x=x, y=y,
training_frame=train,
validation_frame=valid)
learner <- c("h2o.gbm.wrapper", "h2o.glm.wrapper", "h2o.randomForest.wrapper", "h2o.deeplearning.wrapper")
metalearner <- c("h2o.glm.wrapper")
fit <- h2o.ensemble(x = x, y = y,
training_frame = train,
family = family,
learner = learner,
metalearner = metalearner,
cvControl = list(V = 5))
perf <- h2o.ensemble_performance(fit, newdata = test)
perf
print(perf, metric="MSE")
pred <- predict(fit, newdata = test)
pred
glm1 <- h2o.glm(x = x, y = y, family = family,
training_frame = train,
nfolds = nfolds,
fold_assignment = "Modulo",
keep_cross_validation_predictions = TRUE)
glm1 <- h2o.glm(x = x, y = y, family = family,
training_frame = train,
nfolds = nfolds,
fold_assignment = "Modulo",
keep_cross_validation_predictions = TRUE)
gbm1 <- h2o.gbm(x = x, y = y, distribution = "bernoulli",
training_frame = train,
seed = 1,
nfolds = nfolds,
fold_assignment = "Modulo",
keep_cross_validation_predictions = TRUE)
gbm1 <- h2o.gbm(x = x, y = y, distribution = "bernoulli",
training_frame = train,
seed = 1,
nfolds = nfolds,
fold_assignment = "Modulo",
keep_cross_validation_predictions = TRUE)
rf1 <- h2o.randomForest(x = x, y = y, # distribution not used for RF
training_frame = train,
seed = 1,
nfolds = nfolds,
fold_assignment = "Modulo",
keep_cross_validation_predictions = TRUE)
rf1 <- h2o.randomForest(x = x, y = y, # distribution not used for RF
training_frame = train,
seed = 1,
nfolds = nfolds,
fold_assignment = "Modulo",
keep_cross_validation_predictions = TRUE)
dl1 <- h2o.deeplearning(x = x, y = y, distribution = "bernoulli",
training_frame = train,
nfolds = nfolds,
fold_assignment = "Modulo",
keep_cross_validation_predictions = TRUE)
stack <- h2o.stack(models=models,
response_frame=train[,y],
metalearner = metalearner,
seed=1,
keep_levelone_data = TRUE)
models <- list(rf1, gbm1, glm1, dl1)
metalearner <- "h2o.deeplearning.wrapper"
stack <- h2o.stack(models=models,
response_frame=train[,y],
metalearner = metalearner,
seed=1,
keep_levelone_data = TRUE)
perf.stack <- h2o.ensemble_performance(stack, newdata=test)
perf.stack
knitr::opts_chunk$set(echo = TRUE)
library(h2o)
library(devtools)
library(h2oEnsemble)
?h2o.ensemble
